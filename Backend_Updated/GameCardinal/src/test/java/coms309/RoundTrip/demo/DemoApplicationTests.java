package coms309.RoundTrip.demo;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;

import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.test.context.SpringBootTest;

import coms309.RoundTrip.demo.Controller.MessageController;
import coms309.RoundTrip.demo.Model.Message;
import coms309.RoundTrip.demo.Repository.MessageRepository;


@SpringBootTest
public class DemoApplicationTests {

	@InjectMocks
	MessageController mController;

	@Mock
	MessageRepository repo;

	@Before
	public void init() {
		MockitoAnnotations.initMocks(this);
	}

	@Test
	public void getmessageByIdTest() {
		int i = 1;
		ArrayList<Message> message = new ArrayList<>();

		Message one = new Message(1,2,"we are coding baby!");
		one.setMessageId(i++);
		Message two = new Message(1,2,"nothing will stop us now!");
		two.setMessageId(i++);
		Message three = new Message(1,2,"just testing away");
		three.setMessageId(i++);
		Message four = new Message(1,2,"really dialing it in");
		one.setMessageId(i);

		message.add(one);
		message.add(two);
		message.add(three);
		message.add(four);

		when(repo.getById(1)).thenReturn(three);

		Message found = repo.getById(1);
		assertEquals(four, found);
        verify(repo, times(1)).getById(1);

	}
	@Test
    public void getByMessageTest()
    {
        //IDs are autogenerated thus
        int i = 1;
        ArrayList<Message> message = new ArrayList<>();

        Message one = new Message(1,2,"we are coding baby!");
		one.setMessageId(i);
		Message two = new Message(1,2,"nothing will stop us now!");
		two.setMessageId(i++);
		Message three = new Message(1,2,"just testing away");
		three.setMessageId(i++);
		Message four = new Message(1,2,"really dialing it in");
		one.setMessageId(i++);

        message.add(one);
        message.add(two);
        message.add(three);
		message.add(four);

        
		when(repo.findByMessage("we are coding baby!")).thenReturn(one);

        assertEquals(repo.findByMessage("we are coding baby!"), one);
    }

}


